//参考文档：https://www.jianshu.com/p/9e52af175398

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: "org.jetbrains.dokka-android"

//项目主页
def siteUrl = 'https://github.com/tangnuo'
//项目仓库地址
def gitUrl = "${siteUrl}/Lib_Demo"
def issueUrl = "${gitUrl}/issues"

// load properties配置文件
Properties prop = new Properties()
File localPropertiesFile = project.rootProject.file("local.properties")//根目录
//File localPropertiesFile = project.file("local.properties")//相同目录
if (localPropertiesFile.exists()) {
    prop.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.rootProject.file("project.properties");
if (projectPropertiesFile.exists()) {
    prop.load(projectPropertiesFile.newDataInputStream())
}

if (!prop.containsKey("project.name")) {
    println("===>请检查project.properties配置信息")
    return
}
// read properties配置信息
def projectGroup = prop.getProperty("project.group")
def projectName = prop.getProperty("project.name")
def projectDesc = prop.getProperty("project.desc")
def projectVersionName = android.defaultConfig.versionName//使用module的versionName

def bintrayUser = prop.getProperty("bintray.user")
def bintrayApikey = prop.getProperty("bintray.apikey")

group = projectGroup
// 版本号，下次更新是只需要更改版本号即可
version = projectVersionName

////2、生成Javadoc文档
//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.source
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//
//    //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
//    options {
//        encoding "UTF-8"
//        charSet 'UTF-8'
//        author true
//        version projectVersionName
//        links "http://docs.oracle.com/javase/7/docs/api"
//        title projectName
//    }
//}
//
//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = "javadoc"
//    outputDirectory = javadoc.destinationDir
//}
//
////3、文档打包成jar
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs,dokkaJavadoc) {
//    from androidJavadocs.destinationDir
//    classifier = 'javadoc'
//}
//
////4、生成源文件
//task androidSourcesJar(type: Jar) {
//    from android.sourceSets.main.java.source
//    classifier = 'sources'
//}
//
////5、生成Kotlin代码文档
////task dokkaJavaDoc(type: org.jetbrains.dokka.gradle.DokkaTask){
////    outputFormat = 'javadoc'
////    outputDirectory = "$buildDir/javadoc"
////    jdkVersion = 8
////    skipDeprecated = true
////}
//
//
//
////task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
////    group = 'jar'
////    classifier = 'javadoc'
////    from javadoc.destinationDir
////}
//
//if (JavaVersion.current().isJava8Compatible()) {
//    allprojects {
//        tasks.withType(Javadoc) {
//            //去掉javadoc检查：
//            options.addStringOption('Xdoclint:none', '-quiet')
//            options.addStringOption('encoding', 'UTF-8')
//        }
//    }
//}
//
////上传到JCenter所需要的源码文件
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}

task generateSourcesJar(type: Jar) {
    group = 'jar'
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = 'javadoc'
//    outputDirectory = javadoc.destinationDir
//}
//
//task generateJavadoc(type: Jar, dependsOn: dokkaJavadoc) {
//    group = 'jar'
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts {
//    archives generateJavadoc //javadocJar//    archives javadocJar
    archives generateSourcesJar //sourcesJar    //    archives sourcesJar
}


// This generates POM.xml with proper parameters
install {
    //1、定义pom并打包aar
    repositories.mavenInstaller {
        pom.project {
            name projectName
            version projectVersionName // 版本号，下次更新是只需要更改版本号即可
            packaging 'aar'
            //项目描述，可随意填
            description projectDesc
            url siteUrl

            licenses {
                license {
                    //开源协议
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }
            developers {
                developer {
                    //开发者的个人信息
                    id 'tangnuo'//昵称
                    name 'tangnuo'//姓名
                    email 'caowj1104@163.com'
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

// bintray configuration
bintray {
    user = bintrayUser
    key = bintrayApikey
    configurations = ['archives']

    //上传后的地址：https://bintray.com/caowj/LibRepo
    pkg {
        userOrg = "caowj" //自己创建的organization名称，一定要全是小写字母，即使当时创建的名称含有大写，这里全部转换为小写，否则404
        repo = "LibRepo"//自己创建的仓库名称， ‘caowj’这个organization下，必须在网页上创建成功，否则还是无法找到 repo
        name = projectName //发布到JCenter上的项目名字；//最终引用形式：implementation group:name:version
        desc = projectDesc // 项目描述
        websiteUrl = siteUrl
        issueTrackerUrl = issueUrl
        vcsUrl = gitUrl
        labels = ['gradle', 'lib', 'utils']
        licenses = ['Apache-2.0']//不能随便写，只能是仓库创建时选择的license type
        publish = true // 是否是公开项目，公开别人可以引用
        publicDownloadNumbers = true
    }
}
